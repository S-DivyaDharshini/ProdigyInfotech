import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
%matplotlib inline
df=pd.read_csv("bank.csv")
df.head()
df.tail()
df.shape
df.columns
df.dtypes
df.dtypes.value_counts()
df.info()
df.duplicated().sum()
df.isna().sum()
cat_cols=df.select_dtypes(include="object").columns
print(cat_cols)
num_cols=df.select_dtypes(exclude="object").columns
print(num_cols)
df.describe()
df.describe(include="object")
df.hist(figsize=(10,10),color="#cc5500")
plt.show()
for feature in cat_cols:
    plt.figure(figsize=(5,5))
    sns.countplot(x=feature,data=df,palette="Wistia")
    plt.title(f"bar plot of {feature}")
    plt.xlabel("feature")
    plt.ylabel("count")
    plt.xticks(rotation=90)
    plt.show()
df.plot(kind="box",subplots=True,layout=(2,5),figsize=(20,10),color="#7b3f00")
plt.show()
column=df[['age','campaign','duration']]
q1=np.percentile(column,25)
q3=np.percentile(column,75)
iqr=q3-q1
lower_bound=q1-1.5*iqr
upper_bound=q3-1.5*iqr
df[['age','campaign','duration']]=column[(column>lower_bound)&(column<upper_bound)]
df.plot(kind="box",subplots=True,layout=(2,5),figsize=(20,10),color="#808000")
plt.show()
high_corr_cols=['emp.var.rate','euribo3m','nr.employed']
df.copy()
df.columns
df.shape
from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
df_encoded=df.apply(lb.fit_transform)
df_encoded
df_encoded['deposit'].value_counts()
x=df_encoded.drop("deposit",axis=1)
y=df_encoded['deposit']
print(x.shape)
print(y.shape)
print(type(x))
print(type(y))
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score
def eval_model(y_test,y_pred):
    acc=accuracy_score(y_test,y_pred)
    print("accuracy_score",acc)
    cm=confusion_matrix(y_test,y_pred)
    print("confusion matrix\n",cm)
    print("Classification report\n",classification_report(y_test,y_pred))
def nscore(model):
    train_score=model.score(x_train,y_train)
    test_score=model.score(x_test,y_test)
    print("training score",train_score)
    print("testing score",test_score)
from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(criterion="gini",max_depth=5,min_samples_split=10)
dt.fit(x_train,y_train)
nscore(dt)
ypred_dt=dt.predict(x_test)
print(ypred_dt)
eval_model(y_test,ypred_dt)
from sklearn.tree import plot_tree
cn=["no","yes"]
fn=x_train.columns
print(fn)
print(cn)
plot_tree(dt,class_names=cn,filled=True)
plt.show()
dt1=DecisionTreeClassifier(criterion="entropy",max_depth=4,min_samples_split=15)
dt1.fit(x_train,y_train)
nscore(dt1)
ypred_dt1=dt1.predict(x_test)
eval_model(y_test,ypred_dt1)
plt.figure(figsize=(15,15))
plot_tree(dt1,class_names=cn,filled=True)
plt.show()
plt.figure(figsize=(16,9))
sns.countplot(x="job",data=df)
sns.countplot(x="job",data=df)
sns.countplot(x="marital",data=df)
sns.countplot(x="education",data=df)
sns.countplot(x="loan",data=df)
plt.figure(figsize=(16,9))
sns.pairplot(data=df,hue="default")
ny_df=df.select_dtypes(exclude=[object])
ny_df.corr()
plt.figure(figsize=(16,9))
sns.heatmap(ny_df.corr(),annot=True)
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['job']=le.fit_transform(df['job'])
df['marital']=le.fit_transform(df['marital'])
df['education']=le.fit_transform(df['education'])
df['default']=le.fit_transform(df['default'])
df['loan']=le.fit_transform(df['loan'])
df['contact']=le.fit_transform(df['contact'])
df['poutcome']=le.fit_transform(df['poutcome'])
df['housing']=le.fit_transform(df['housing'])
df['month']=le.fit_transform(df['month'])
df.head()
df.drop(["pdays","previous","poutcome"],axis=1)
df.head()
